(define y -1)
(let ((y 1) (sum (lambda (x) y))) (sum 5)) ;; -1
(define y -1)
(let ((sum (lambda (x) y)) (y 1)) (sum 5)) ;; -1
(let* ((y 1) (sum (lambda (x) y))) (sum 5)) ;; 1
(define y -1)
(let* ((sum (lambda (x) y)) (y 1)) (sum 5)) ;; -1
;(let ((sum (lambda (x) (if (= 0 x) 0 (+ x (sum (- x 1))))))) (sum 5)) ;; error
;(let* ((sum (lambda (x) (if (= 0 x) 0 (+ x (sum (- x 1))))))) (sum 5)) ;; error
(letrec ((sum (lambda (x) (if (= 0 x) 0 (+ x (sum (- x 1))))))) (sum 5)) ;; 15.0



(letrec ((x 1) (y 1)) (+ x y)) ;; 2.0
(letrec ((y x) (x 99)) x) ;; 99
(letrec ((x 1) (y x)) y) ;; 1
(let* ((x 1) (y x)) y) ;; 1
(letrec ((x 1) (y x)) (+ y x)) ;; 2.0

(let* ((x (* 5.0 5.0)) (y (- x (* 4.0 4.0)))) y) ;; 9.0000000
(let ((x 0) (y 1)) (let* ((x y) (y x)) y)) ;; 1
(let ((x 0) (y 1)) (let* ((x y) (y x)) x)) ;; 1

(letrec ((y x) (x 1)) y) ;; error - undefined
;(letrec ((y x) (x y)) y) ;; error - undefined