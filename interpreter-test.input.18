(cdr (quote (1))) ;; () ;; works
(cdr (quote (1 2))) ;; 2 ;; works
(cdr (quote (1 2 3))) ;; 2 3 ;; works
(cdr (quote ((1) (2 3)))) ;; (2 3) ;; works
(cdr (quote ((1) (cdr (2 3))))) ;; (cdr (2 3)) ;; works
(define x (cdr (quote ((1) (2 3)))))
x ;; (2 3),null ;; works
(cdr (cdr (quote ((1) (2 3))))) ;;->(2 3),null->() :: works
(cdr (quote ((2 3)))) ;; () ;; works

(car (quote (1))) ;; 1 ;; works
(car (quote (1 2))) ;; 1 ;; works
(car (quote ((1) 2))) ;; 1,null ;; works
(car (quote ((1 2) 3))) ;; 1 2 ;;; works
(car (car (quote ((1 2) 3)))) ;; 1 ;; works
(define a 3)
(car (quote (a 2 3)))

(car (cdr (quote (1 (3 4))))) ;; works
(cdr (car (cdr (quote (1 (3 4)))))) ;; works

(cdr (quote (1 3 4))) ;; 3 4,null ;; works
(car (cdr (quote (1 3 4)))) ;; 3 ;; works
(cdr (quote (1 (3 4)))) ;; (3 4), null ;; works
(car (cdr (quote (1 3 4)))) ;; 3 ;; works
(cdr (car (cdr (quote (1 (3 4)))))) ;; 4,null ;; works

(define length 
    (lambda (L)
        (if (null? L)
            0
            (+ 1 (length (cdr L ))))))
(length (quote ())) ;; 0 ;; works
(length (quote (4 5 6))) ;; 3 ;; works
